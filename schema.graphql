schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """measured in seconds"""
  ttl: Int! = 60

  """refresh the cache entry"""
  refresh: Boolean! = false
) on QUERY

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

"""ordering argument of a cursor"""
enum cursor_ordering {
  """ascending ordering of the cursor"""
  ASC

  """descending ordering of the cursor"""
  DESC
}

scalar date

"""
Boolean expression to compare columns of type "date". All fields are combined with logical 'AND'.
"""
input date_comparison_exp {
  _eq: date
  _gt: date
  _gte: date
  _in: [date!]
  _is_null: Boolean
  _lt: date
  _lte: date
  _neq: date
  _nin: [date!]
}

"""
columns and relationships of "dikasir.Nota"
"""
type dikasir_Nota {
  harga: Int!
  id: uuid!
  id_produk: uuid!
  kodeNota: uuid!
  namaProduk: String!
  quantity: Int!
}

"""
aggregated selection of "dikasir.Nota"
"""
type dikasir_Nota_aggregate {
  aggregate: dikasir_Nota_aggregate_fields
  nodes: [dikasir_Nota!]!
}

input dikasir_Nota_aggregate_bool_exp {
  count: dikasir_Nota_aggregate_bool_exp_count
}

input dikasir_Nota_aggregate_bool_exp_count {
  arguments: [dikasir_Nota_select_column!]
  distinct: Boolean
  filter: dikasir_Nota_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "dikasir.Nota"
"""
type dikasir_Nota_aggregate_fields {
  avg: dikasir_Nota_avg_fields
  count(columns: [dikasir_Nota_select_column!], distinct: Boolean): Int!
  max: dikasir_Nota_max_fields
  min: dikasir_Nota_min_fields
  stddev: dikasir_Nota_stddev_fields
  stddev_pop: dikasir_Nota_stddev_pop_fields
  stddev_samp: dikasir_Nota_stddev_samp_fields
  sum: dikasir_Nota_sum_fields
  var_pop: dikasir_Nota_var_pop_fields
  var_samp: dikasir_Nota_var_samp_fields
  variance: dikasir_Nota_variance_fields
}

"""
order by aggregate values of table "dikasir.Nota"
"""
input dikasir_Nota_aggregate_order_by {
  avg: dikasir_Nota_avg_order_by
  count: order_by
  max: dikasir_Nota_max_order_by
  min: dikasir_Nota_min_order_by
  stddev: dikasir_Nota_stddev_order_by
  stddev_pop: dikasir_Nota_stddev_pop_order_by
  stddev_samp: dikasir_Nota_stddev_samp_order_by
  sum: dikasir_Nota_sum_order_by
  var_pop: dikasir_Nota_var_pop_order_by
  var_samp: dikasir_Nota_var_samp_order_by
  variance: dikasir_Nota_variance_order_by
}

"""
input type for inserting array relation for remote table "dikasir.Nota"
"""
input dikasir_Nota_arr_rel_insert_input {
  data: [dikasir_Nota_insert_input!]!

  """upsert condition"""
  on_conflict: dikasir_Nota_on_conflict
}

"""aggregate avg on columns"""
type dikasir_Nota_avg_fields {
  harga: Float
  quantity: Float
}

"""
order by avg() on columns of table "dikasir.Nota"
"""
input dikasir_Nota_avg_order_by {
  harga: order_by
  quantity: order_by
}

"""
Boolean expression to filter rows from the table "dikasir.Nota". All fields are combined with a logical 'AND'.
"""
input dikasir_Nota_bool_exp {
  _and: [dikasir_Nota_bool_exp!]
  _not: dikasir_Nota_bool_exp
  _or: [dikasir_Nota_bool_exp!]
  harga: Int_comparison_exp
  id: uuid_comparison_exp
  id_produk: uuid_comparison_exp
  kodeNota: uuid_comparison_exp
  namaProduk: String_comparison_exp
  quantity: Int_comparison_exp
}

"""
unique or primary key constraints on table "dikasir.Nota"
"""
enum dikasir_Nota_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  Nota_pkey
}

"""
input type for incrementing numeric columns in table "dikasir.Nota"
"""
input dikasir_Nota_inc_input {
  harga: Int
  quantity: Int
}

"""
input type for inserting data into table "dikasir.Nota"
"""
input dikasir_Nota_insert_input {
  harga: Int
  id: uuid
  id_produk: uuid
  kodeNota: uuid
  namaProduk: String
  quantity: Int
}

"""aggregate max on columns"""
type dikasir_Nota_max_fields {
  harga: Int
  id: uuid
  id_produk: uuid
  kodeNota: uuid
  namaProduk: String
  quantity: Int
}

"""
order by max() on columns of table "dikasir.Nota"
"""
input dikasir_Nota_max_order_by {
  harga: order_by
  id: order_by
  id_produk: order_by
  kodeNota: order_by
  namaProduk: order_by
  quantity: order_by
}

"""aggregate min on columns"""
type dikasir_Nota_min_fields {
  harga: Int
  id: uuid
  id_produk: uuid
  kodeNota: uuid
  namaProduk: String
  quantity: Int
}

"""
order by min() on columns of table "dikasir.Nota"
"""
input dikasir_Nota_min_order_by {
  harga: order_by
  id: order_by
  id_produk: order_by
  kodeNota: order_by
  namaProduk: order_by
  quantity: order_by
}

"""
response of any mutation on the table "dikasir.Nota"
"""
type dikasir_Nota_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [dikasir_Nota!]!
}

"""
on_conflict condition type for table "dikasir.Nota"
"""
input dikasir_Nota_on_conflict {
  constraint: dikasir_Nota_constraint!
  update_columns: [dikasir_Nota_update_column!]! = []
  where: dikasir_Nota_bool_exp
}

"""Ordering options when selecting data from "dikasir.Nota"."""
input dikasir_Nota_order_by {
  harga: order_by
  id: order_by
  id_produk: order_by
  kodeNota: order_by
  namaProduk: order_by
  quantity: order_by
}

"""primary key columns input for table: dikasir.Nota"""
input dikasir_Nota_pk_columns_input {
  id: uuid!
}

"""
select columns of table "dikasir.Nota"
"""
enum dikasir_Nota_select_column {
  """column name"""
  harga

  """column name"""
  id

  """column name"""
  id_produk

  """column name"""
  kodeNota

  """column name"""
  namaProduk

  """column name"""
  quantity
}

"""
input type for updating data in table "dikasir.Nota"
"""
input dikasir_Nota_set_input {
  harga: Int
  id: uuid
  id_produk: uuid
  kodeNota: uuid
  namaProduk: String
  quantity: Int
}

"""aggregate stddev on columns"""
type dikasir_Nota_stddev_fields {
  harga: Float
  quantity: Float
}

"""
order by stddev() on columns of table "dikasir.Nota"
"""
input dikasir_Nota_stddev_order_by {
  harga: order_by
  quantity: order_by
}

"""aggregate stddev_pop on columns"""
type dikasir_Nota_stddev_pop_fields {
  harga: Float
  quantity: Float
}

"""
order by stddev_pop() on columns of table "dikasir.Nota"
"""
input dikasir_Nota_stddev_pop_order_by {
  harga: order_by
  quantity: order_by
}

"""aggregate stddev_samp on columns"""
type dikasir_Nota_stddev_samp_fields {
  harga: Float
  quantity: Float
}

"""
order by stddev_samp() on columns of table "dikasir.Nota"
"""
input dikasir_Nota_stddev_samp_order_by {
  harga: order_by
  quantity: order_by
}

"""
Streaming cursor of the table "dikasir_Nota"
"""
input dikasir_Nota_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: dikasir_Nota_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input dikasir_Nota_stream_cursor_value_input {
  harga: Int
  id: uuid
  id_produk: uuid
  kodeNota: uuid
  namaProduk: String
  quantity: Int
}

"""aggregate sum on columns"""
type dikasir_Nota_sum_fields {
  harga: Int
  quantity: Int
}

"""
order by sum() on columns of table "dikasir.Nota"
"""
input dikasir_Nota_sum_order_by {
  harga: order_by
  quantity: order_by
}

"""
update columns of table "dikasir.Nota"
"""
enum dikasir_Nota_update_column {
  """column name"""
  harga

  """column name"""
  id

  """column name"""
  id_produk

  """column name"""
  kodeNota

  """column name"""
  namaProduk

  """column name"""
  quantity
}

input dikasir_Nota_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: dikasir_Nota_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: dikasir_Nota_set_input

  """filter the rows which have to be updated"""
  where: dikasir_Nota_bool_exp!
}

"""aggregate var_pop on columns"""
type dikasir_Nota_var_pop_fields {
  harga: Float
  quantity: Float
}

"""
order by var_pop() on columns of table "dikasir.Nota"
"""
input dikasir_Nota_var_pop_order_by {
  harga: order_by
  quantity: order_by
}

"""aggregate var_samp on columns"""
type dikasir_Nota_var_samp_fields {
  harga: Float
  quantity: Float
}

"""
order by var_samp() on columns of table "dikasir.Nota"
"""
input dikasir_Nota_var_samp_order_by {
  harga: order_by
  quantity: order_by
}

"""aggregate variance on columns"""
type dikasir_Nota_variance_fields {
  harga: Float
  quantity: Float
}

"""
order by variance() on columns of table "dikasir.Nota"
"""
input dikasir_Nota_variance_order_by {
  harga: order_by
  quantity: order_by
}

"""
columns and relationships of "dikasir.Produk"
"""
type dikasir_Produk {
  gambar: String!
  harga: Int!
  id: uuid!
  namaProduk: String!
  stok: Int!
}

"""
aggregated selection of "dikasir.Produk"
"""
type dikasir_Produk_aggregate {
  aggregate: dikasir_Produk_aggregate_fields
  nodes: [dikasir_Produk!]!
}

"""
aggregate fields of "dikasir.Produk"
"""
type dikasir_Produk_aggregate_fields {
  avg: dikasir_Produk_avg_fields
  count(columns: [dikasir_Produk_select_column!], distinct: Boolean): Int!
  max: dikasir_Produk_max_fields
  min: dikasir_Produk_min_fields
  stddev: dikasir_Produk_stddev_fields
  stddev_pop: dikasir_Produk_stddev_pop_fields
  stddev_samp: dikasir_Produk_stddev_samp_fields
  sum: dikasir_Produk_sum_fields
  var_pop: dikasir_Produk_var_pop_fields
  var_samp: dikasir_Produk_var_samp_fields
  variance: dikasir_Produk_variance_fields
}

"""aggregate avg on columns"""
type dikasir_Produk_avg_fields {
  harga: Float
  stok: Float
}

"""
Boolean expression to filter rows from the table "dikasir.Produk". All fields are combined with a logical 'AND'.
"""
input dikasir_Produk_bool_exp {
  _and: [dikasir_Produk_bool_exp!]
  _not: dikasir_Produk_bool_exp
  _or: [dikasir_Produk_bool_exp!]
  gambar: String_comparison_exp
  harga: Int_comparison_exp
  id: uuid_comparison_exp
  namaProduk: String_comparison_exp
  stok: Int_comparison_exp
}

"""
unique or primary key constraints on table "dikasir.Produk"
"""
enum dikasir_Produk_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  Produk_pkey
}

"""
input type for incrementing numeric columns in table "dikasir.Produk"
"""
input dikasir_Produk_inc_input {
  harga: Int
  stok: Int
}

"""
input type for inserting data into table "dikasir.Produk"
"""
input dikasir_Produk_insert_input {
  gambar: String
  harga: Int
  id: uuid
  namaProduk: String
  stok: Int
}

"""aggregate max on columns"""
type dikasir_Produk_max_fields {
  gambar: String
  harga: Int
  id: uuid
  namaProduk: String
  stok: Int
}

"""aggregate min on columns"""
type dikasir_Produk_min_fields {
  gambar: String
  harga: Int
  id: uuid
  namaProduk: String
  stok: Int
}

"""
response of any mutation on the table "dikasir.Produk"
"""
type dikasir_Produk_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [dikasir_Produk!]!
}

"""
on_conflict condition type for table "dikasir.Produk"
"""
input dikasir_Produk_on_conflict {
  constraint: dikasir_Produk_constraint!
  update_columns: [dikasir_Produk_update_column!]! = []
  where: dikasir_Produk_bool_exp
}

"""Ordering options when selecting data from "dikasir.Produk"."""
input dikasir_Produk_order_by {
  gambar: order_by
  harga: order_by
  id: order_by
  namaProduk: order_by
  stok: order_by
}

"""primary key columns input for table: dikasir.Produk"""
input dikasir_Produk_pk_columns_input {
  id: uuid!
}

"""
select columns of table "dikasir.Produk"
"""
enum dikasir_Produk_select_column {
  """column name"""
  gambar

  """column name"""
  harga

  """column name"""
  id

  """column name"""
  namaProduk

  """column name"""
  stok
}

"""
input type for updating data in table "dikasir.Produk"
"""
input dikasir_Produk_set_input {
  gambar: String
  harga: Int
  id: uuid
  namaProduk: String
  stok: Int
}

"""aggregate stddev on columns"""
type dikasir_Produk_stddev_fields {
  harga: Float
  stok: Float
}

"""aggregate stddev_pop on columns"""
type dikasir_Produk_stddev_pop_fields {
  harga: Float
  stok: Float
}

"""aggregate stddev_samp on columns"""
type dikasir_Produk_stddev_samp_fields {
  harga: Float
  stok: Float
}

"""
Streaming cursor of the table "dikasir_Produk"
"""
input dikasir_Produk_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: dikasir_Produk_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input dikasir_Produk_stream_cursor_value_input {
  gambar: String
  harga: Int
  id: uuid
  namaProduk: String
  stok: Int
}

"""aggregate sum on columns"""
type dikasir_Produk_sum_fields {
  harga: Int
  stok: Int
}

"""
update columns of table "dikasir.Produk"
"""
enum dikasir_Produk_update_column {
  """column name"""
  gambar

  """column name"""
  harga

  """column name"""
  id

  """column name"""
  namaProduk

  """column name"""
  stok
}

input dikasir_Produk_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: dikasir_Produk_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: dikasir_Produk_set_input

  """filter the rows which have to be updated"""
  where: dikasir_Produk_bool_exp!
}

"""aggregate var_pop on columns"""
type dikasir_Produk_var_pop_fields {
  harga: Float
  stok: Float
}

"""aggregate var_samp on columns"""
type dikasir_Produk_var_samp_fields {
  harga: Float
  stok: Float
}

"""aggregate variance on columns"""
type dikasir_Produk_variance_fields {
  harga: Float
  stok: Float
}

"""
columns and relationships of "dikasir.Transaksi"
"""
type dikasir_Transaksi {
  bayar: Int!
  id: uuid!
  kembali: Int!
  kodeNota: uuid!

  """An array relationship"""
  rincian(
    """distinct select on columns"""
    distinct_on: [dikasir_Nota_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [dikasir_Nota_order_by!]

    """filter the rows returned"""
    where: dikasir_Nota_bool_exp
  ): [dikasir_Nota!]!

  """An aggregate relationship"""
  rincian_aggregate(
    """distinct select on columns"""
    distinct_on: [dikasir_Nota_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [dikasir_Nota_order_by!]

    """filter the rows returned"""
    where: dikasir_Nota_bool_exp
  ): dikasir_Nota_aggregate!
  tanggal: date!
  total: Int!
}

"""
aggregated selection of "dikasir.Transaksi"
"""
type dikasir_Transaksi_aggregate {
  aggregate: dikasir_Transaksi_aggregate_fields
  nodes: [dikasir_Transaksi!]!
}

"""
aggregate fields of "dikasir.Transaksi"
"""
type dikasir_Transaksi_aggregate_fields {
  avg: dikasir_Transaksi_avg_fields
  count(columns: [dikasir_Transaksi_select_column!], distinct: Boolean): Int!
  max: dikasir_Transaksi_max_fields
  min: dikasir_Transaksi_min_fields
  stddev: dikasir_Transaksi_stddev_fields
  stddev_pop: dikasir_Transaksi_stddev_pop_fields
  stddev_samp: dikasir_Transaksi_stddev_samp_fields
  sum: dikasir_Transaksi_sum_fields
  var_pop: dikasir_Transaksi_var_pop_fields
  var_samp: dikasir_Transaksi_var_samp_fields
  variance: dikasir_Transaksi_variance_fields
}

"""aggregate avg on columns"""
type dikasir_Transaksi_avg_fields {
  bayar: Float
  kembali: Float
  total: Float
}

"""
Boolean expression to filter rows from the table "dikasir.Transaksi". All fields are combined with a logical 'AND'.
"""
input dikasir_Transaksi_bool_exp {
  _and: [dikasir_Transaksi_bool_exp!]
  _not: dikasir_Transaksi_bool_exp
  _or: [dikasir_Transaksi_bool_exp!]
  bayar: Int_comparison_exp
  id: uuid_comparison_exp
  kembali: Int_comparison_exp
  kodeNota: uuid_comparison_exp
  rincian: dikasir_Nota_bool_exp
  rincian_aggregate: dikasir_Nota_aggregate_bool_exp
  tanggal: date_comparison_exp
  total: Int_comparison_exp
}

"""
unique or primary key constraints on table "dikasir.Transaksi"
"""
enum dikasir_Transaksi_constraint {
  """
  unique or primary key constraint on columns "kodeNota"
  """
  Transaksi_kodeNota_key

  """
  unique or primary key constraint on columns "id"
  """
  Transaksi_pkey
}

"""
input type for incrementing numeric columns in table "dikasir.Transaksi"
"""
input dikasir_Transaksi_inc_input {
  bayar: Int
  kembali: Int
  total: Int
}

"""
input type for inserting data into table "dikasir.Transaksi"
"""
input dikasir_Transaksi_insert_input {
  bayar: Int
  id: uuid
  kembali: Int
  kodeNota: uuid
  rincian: dikasir_Nota_arr_rel_insert_input
  tanggal: date
  total: Int
}

"""aggregate max on columns"""
type dikasir_Transaksi_max_fields {
  bayar: Int
  id: uuid
  kembali: Int
  kodeNota: uuid
  tanggal: date
  total: Int
}

"""aggregate min on columns"""
type dikasir_Transaksi_min_fields {
  bayar: Int
  id: uuid
  kembali: Int
  kodeNota: uuid
  tanggal: date
  total: Int
}

"""
response of any mutation on the table "dikasir.Transaksi"
"""
type dikasir_Transaksi_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [dikasir_Transaksi!]!
}

"""
on_conflict condition type for table "dikasir.Transaksi"
"""
input dikasir_Transaksi_on_conflict {
  constraint: dikasir_Transaksi_constraint!
  update_columns: [dikasir_Transaksi_update_column!]! = []
  where: dikasir_Transaksi_bool_exp
}

"""Ordering options when selecting data from "dikasir.Transaksi"."""
input dikasir_Transaksi_order_by {
  bayar: order_by
  id: order_by
  kembali: order_by
  kodeNota: order_by
  rincian_aggregate: dikasir_Nota_aggregate_order_by
  tanggal: order_by
  total: order_by
}

"""primary key columns input for table: dikasir.Transaksi"""
input dikasir_Transaksi_pk_columns_input {
  id: uuid!
}

"""
select columns of table "dikasir.Transaksi"
"""
enum dikasir_Transaksi_select_column {
  """column name"""
  bayar

  """column name"""
  id

  """column name"""
  kembali

  """column name"""
  kodeNota

  """column name"""
  tanggal

  """column name"""
  total
}

"""
input type for updating data in table "dikasir.Transaksi"
"""
input dikasir_Transaksi_set_input {
  bayar: Int
  id: uuid
  kembali: Int
  kodeNota: uuid
  tanggal: date
  total: Int
}

"""aggregate stddev on columns"""
type dikasir_Transaksi_stddev_fields {
  bayar: Float
  kembali: Float
  total: Float
}

"""aggregate stddev_pop on columns"""
type dikasir_Transaksi_stddev_pop_fields {
  bayar: Float
  kembali: Float
  total: Float
}

"""aggregate stddev_samp on columns"""
type dikasir_Transaksi_stddev_samp_fields {
  bayar: Float
  kembali: Float
  total: Float
}

"""
Streaming cursor of the table "dikasir_Transaksi"
"""
input dikasir_Transaksi_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: dikasir_Transaksi_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input dikasir_Transaksi_stream_cursor_value_input {
  bayar: Int
  id: uuid
  kembali: Int
  kodeNota: uuid
  tanggal: date
  total: Int
}

"""aggregate sum on columns"""
type dikasir_Transaksi_sum_fields {
  bayar: Int
  kembali: Int
  total: Int
}

"""
update columns of table "dikasir.Transaksi"
"""
enum dikasir_Transaksi_update_column {
  """column name"""
  bayar

  """column name"""
  id

  """column name"""
  kembali

  """column name"""
  kodeNota

  """column name"""
  tanggal

  """column name"""
  total
}

input dikasir_Transaksi_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: dikasir_Transaksi_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: dikasir_Transaksi_set_input

  """filter the rows which have to be updated"""
  where: dikasir_Transaksi_bool_exp!
}

"""aggregate var_pop on columns"""
type dikasir_Transaksi_var_pop_fields {
  bayar: Float
  kembali: Float
  total: Float
}

"""aggregate var_samp on columns"""
type dikasir_Transaksi_var_samp_fields {
  bayar: Float
  kembali: Float
  total: Float
}

"""aggregate variance on columns"""
type dikasir_Transaksi_variance_fields {
  bayar: Float
  kembali: Float
  total: Float
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "dikasir.Nota"
  """
  delete_dikasir_Nota(
    """filter the rows which have to be deleted"""
    where: dikasir_Nota_bool_exp!
  ): dikasir_Nota_mutation_response

  """
  delete single row from the table: "dikasir.Nota"
  """
  delete_dikasir_Nota_by_pk(id: uuid!): dikasir_Nota

  """
  delete data from the table: "dikasir.Produk"
  """
  delete_dikasir_Produk(
    """filter the rows which have to be deleted"""
    where: dikasir_Produk_bool_exp!
  ): dikasir_Produk_mutation_response

  """
  delete single row from the table: "dikasir.Produk"
  """
  delete_dikasir_Produk_by_pk(id: uuid!): dikasir_Produk

  """
  delete data from the table: "dikasir.Transaksi"
  """
  delete_dikasir_Transaksi(
    """filter the rows which have to be deleted"""
    where: dikasir_Transaksi_bool_exp!
  ): dikasir_Transaksi_mutation_response

  """
  delete single row from the table: "dikasir.Transaksi"
  """
  delete_dikasir_Transaksi_by_pk(id: uuid!): dikasir_Transaksi

  """
  insert data into the table: "dikasir.Nota"
  """
  insert_dikasir_Nota(
    """the rows to be inserted"""
    objects: [dikasir_Nota_insert_input!]!

    """upsert condition"""
    on_conflict: dikasir_Nota_on_conflict
  ): dikasir_Nota_mutation_response

  """
  insert a single row into the table: "dikasir.Nota"
  """
  insert_dikasir_Nota_one(
    """the row to be inserted"""
    object: dikasir_Nota_insert_input!

    """upsert condition"""
    on_conflict: dikasir_Nota_on_conflict
  ): dikasir_Nota

  """
  insert data into the table: "dikasir.Produk"
  """
  insert_dikasir_Produk(
    """the rows to be inserted"""
    objects: [dikasir_Produk_insert_input!]!

    """upsert condition"""
    on_conflict: dikasir_Produk_on_conflict
  ): dikasir_Produk_mutation_response

  """
  insert a single row into the table: "dikasir.Produk"
  """
  insert_dikasir_Produk_one(
    """the row to be inserted"""
    object: dikasir_Produk_insert_input!

    """upsert condition"""
    on_conflict: dikasir_Produk_on_conflict
  ): dikasir_Produk

  """
  insert data into the table: "dikasir.Transaksi"
  """
  insert_dikasir_Transaksi(
    """the rows to be inserted"""
    objects: [dikasir_Transaksi_insert_input!]!

    """upsert condition"""
    on_conflict: dikasir_Transaksi_on_conflict
  ): dikasir_Transaksi_mutation_response

  """
  insert a single row into the table: "dikasir.Transaksi"
  """
  insert_dikasir_Transaksi_one(
    """the row to be inserted"""
    object: dikasir_Transaksi_insert_input!

    """upsert condition"""
    on_conflict: dikasir_Transaksi_on_conflict
  ): dikasir_Transaksi

  """
  update data of the table: "dikasir.Nota"
  """
  update_dikasir_Nota(
    """increments the numeric columns with given value of the filtered values"""
    _inc: dikasir_Nota_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: dikasir_Nota_set_input

    """filter the rows which have to be updated"""
    where: dikasir_Nota_bool_exp!
  ): dikasir_Nota_mutation_response

  """
  update single row of the table: "dikasir.Nota"
  """
  update_dikasir_Nota_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: dikasir_Nota_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: dikasir_Nota_set_input
    pk_columns: dikasir_Nota_pk_columns_input!
  ): dikasir_Nota

  """
  update multiples rows of table: "dikasir.Nota"
  """
  update_dikasir_Nota_many(
    """updates to execute, in order"""
    updates: [dikasir_Nota_updates!]!
  ): [dikasir_Nota_mutation_response]

  """
  update data of the table: "dikasir.Produk"
  """
  update_dikasir_Produk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: dikasir_Produk_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: dikasir_Produk_set_input

    """filter the rows which have to be updated"""
    where: dikasir_Produk_bool_exp!
  ): dikasir_Produk_mutation_response

  """
  update single row of the table: "dikasir.Produk"
  """
  update_dikasir_Produk_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: dikasir_Produk_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: dikasir_Produk_set_input
    pk_columns: dikasir_Produk_pk_columns_input!
  ): dikasir_Produk

  """
  update multiples rows of table: "dikasir.Produk"
  """
  update_dikasir_Produk_many(
    """updates to execute, in order"""
    updates: [dikasir_Produk_updates!]!
  ): [dikasir_Produk_mutation_response]

  """
  update data of the table: "dikasir.Transaksi"
  """
  update_dikasir_Transaksi(
    """increments the numeric columns with given value of the filtered values"""
    _inc: dikasir_Transaksi_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: dikasir_Transaksi_set_input

    """filter the rows which have to be updated"""
    where: dikasir_Transaksi_bool_exp!
  ): dikasir_Transaksi_mutation_response

  """
  update single row of the table: "dikasir.Transaksi"
  """
  update_dikasir_Transaksi_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: dikasir_Transaksi_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: dikasir_Transaksi_set_input
    pk_columns: dikasir_Transaksi_pk_columns_input!
  ): dikasir_Transaksi

  """
  update multiples rows of table: "dikasir.Transaksi"
  """
  update_dikasir_Transaksi_many(
    """updates to execute, in order"""
    updates: [dikasir_Transaksi_updates!]!
  ): [dikasir_Transaksi_mutation_response]
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

type query_root {
  """
  fetch data from the table: "dikasir.Nota"
  """
  dikasir_Nota(
    """distinct select on columns"""
    distinct_on: [dikasir_Nota_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [dikasir_Nota_order_by!]

    """filter the rows returned"""
    where: dikasir_Nota_bool_exp
  ): [dikasir_Nota!]!

  """
  fetch aggregated fields from the table: "dikasir.Nota"
  """
  dikasir_Nota_aggregate(
    """distinct select on columns"""
    distinct_on: [dikasir_Nota_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [dikasir_Nota_order_by!]

    """filter the rows returned"""
    where: dikasir_Nota_bool_exp
  ): dikasir_Nota_aggregate!

  """fetch data from the table: "dikasir.Nota" using primary key columns"""
  dikasir_Nota_by_pk(id: uuid!): dikasir_Nota

  """
  fetch data from the table: "dikasir.Produk"
  """
  dikasir_Produk(
    """distinct select on columns"""
    distinct_on: [dikasir_Produk_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [dikasir_Produk_order_by!]

    """filter the rows returned"""
    where: dikasir_Produk_bool_exp
  ): [dikasir_Produk!]!

  """
  fetch aggregated fields from the table: "dikasir.Produk"
  """
  dikasir_Produk_aggregate(
    """distinct select on columns"""
    distinct_on: [dikasir_Produk_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [dikasir_Produk_order_by!]

    """filter the rows returned"""
    where: dikasir_Produk_bool_exp
  ): dikasir_Produk_aggregate!

  """fetch data from the table: "dikasir.Produk" using primary key columns"""
  dikasir_Produk_by_pk(id: uuid!): dikasir_Produk

  """
  fetch data from the table: "dikasir.Transaksi"
  """
  dikasir_Transaksi(
    """distinct select on columns"""
    distinct_on: [dikasir_Transaksi_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [dikasir_Transaksi_order_by!]

    """filter the rows returned"""
    where: dikasir_Transaksi_bool_exp
  ): [dikasir_Transaksi!]!

  """
  fetch aggregated fields from the table: "dikasir.Transaksi"
  """
  dikasir_Transaksi_aggregate(
    """distinct select on columns"""
    distinct_on: [dikasir_Transaksi_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [dikasir_Transaksi_order_by!]

    """filter the rows returned"""
    where: dikasir_Transaksi_bool_exp
  ): dikasir_Transaksi_aggregate!

  """
  fetch data from the table: "dikasir.Transaksi" using primary key columns
  """
  dikasir_Transaksi_by_pk(id: uuid!): dikasir_Transaksi
}

type subscription_root {
  """
  fetch data from the table: "dikasir.Nota"
  """
  dikasir_Nota(
    """distinct select on columns"""
    distinct_on: [dikasir_Nota_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [dikasir_Nota_order_by!]

    """filter the rows returned"""
    where: dikasir_Nota_bool_exp
  ): [dikasir_Nota!]!

  """
  fetch aggregated fields from the table: "dikasir.Nota"
  """
  dikasir_Nota_aggregate(
    """distinct select on columns"""
    distinct_on: [dikasir_Nota_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [dikasir_Nota_order_by!]

    """filter the rows returned"""
    where: dikasir_Nota_bool_exp
  ): dikasir_Nota_aggregate!

  """fetch data from the table: "dikasir.Nota" using primary key columns"""
  dikasir_Nota_by_pk(id: uuid!): dikasir_Nota

  """
  fetch data from the table in a streaming manner: "dikasir.Nota"
  """
  dikasir_Nota_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [dikasir_Nota_stream_cursor_input]!

    """filter the rows returned"""
    where: dikasir_Nota_bool_exp
  ): [dikasir_Nota!]!

  """
  fetch data from the table: "dikasir.Produk"
  """
  dikasir_Produk(
    """distinct select on columns"""
    distinct_on: [dikasir_Produk_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [dikasir_Produk_order_by!]

    """filter the rows returned"""
    where: dikasir_Produk_bool_exp
  ): [dikasir_Produk!]!

  """
  fetch aggregated fields from the table: "dikasir.Produk"
  """
  dikasir_Produk_aggregate(
    """distinct select on columns"""
    distinct_on: [dikasir_Produk_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [dikasir_Produk_order_by!]

    """filter the rows returned"""
    where: dikasir_Produk_bool_exp
  ): dikasir_Produk_aggregate!

  """fetch data from the table: "dikasir.Produk" using primary key columns"""
  dikasir_Produk_by_pk(id: uuid!): dikasir_Produk

  """
  fetch data from the table in a streaming manner: "dikasir.Produk"
  """
  dikasir_Produk_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [dikasir_Produk_stream_cursor_input]!

    """filter the rows returned"""
    where: dikasir_Produk_bool_exp
  ): [dikasir_Produk!]!

  """
  fetch data from the table: "dikasir.Transaksi"
  """
  dikasir_Transaksi(
    """distinct select on columns"""
    distinct_on: [dikasir_Transaksi_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [dikasir_Transaksi_order_by!]

    """filter the rows returned"""
    where: dikasir_Transaksi_bool_exp
  ): [dikasir_Transaksi!]!

  """
  fetch aggregated fields from the table: "dikasir.Transaksi"
  """
  dikasir_Transaksi_aggregate(
    """distinct select on columns"""
    distinct_on: [dikasir_Transaksi_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [dikasir_Transaksi_order_by!]

    """filter the rows returned"""
    where: dikasir_Transaksi_bool_exp
  ): dikasir_Transaksi_aggregate!

  """
  fetch data from the table: "dikasir.Transaksi" using primary key columns
  """
  dikasir_Transaksi_by_pk(id: uuid!): dikasir_Transaksi

  """
  fetch data from the table in a streaming manner: "dikasir.Transaksi"
  """
  dikasir_Transaksi_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [dikasir_Transaksi_stream_cursor_input]!

    """filter the rows returned"""
    where: dikasir_Transaksi_bool_exp
  ): [dikasir_Transaksi!]!
}

scalar uuid

"""
Boolean expression to compare columns of type "uuid". All fields are combined with logical 'AND'.
"""
input uuid_comparison_exp {
  _eq: uuid
  _gt: uuid
  _gte: uuid
  _in: [uuid!]
  _is_null: Boolean
  _lt: uuid
  _lte: uuid
  _neq: uuid
  _nin: [uuid!]
}

